# Generated by Django 4.2.3 on 2023-08-01 00:53

from django.db import migrations
import flex.blocks
import profiles.models
import wagtail.blocks
import wagtail.fields
import wagtail.images.blocks
import wagtail.snippets.blocks


class Migration(migrations.Migration):

    dependencies = [
        ('flex', '0001_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='flexpage',
            name='body',
            field=wagtail.fields.StreamField([('section', wagtail.blocks.StructBlock([('body', wagtail.blocks.StreamBlock([('title', wagtail.blocks.StructBlock([('text', wagtail.blocks.CharBlock(help_text='Text to display', required=True)), ('alignment', wagtail.blocks.ChoiceBlock(choices=[('text-left', 'Title to the left'), ('text-center', 'Title centered'), ('text-right', 'Title to the right')], help_text='Title for a section of the page')), ('header', wagtail.blocks.ChoiceBlock(choices=[('h1', 'Large title (h1)'), ('h2', 'Medium title (h2)'), ('h3', 'Small title (h3)')], help_text='Header size'))])), ('text', flex.blocks.RichTextBlockWithGroup()), ('image_and_text', wagtail.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock(help_text='Image automatically cropped to 786px by 552px', required=True)), ('image_alignment', wagtail.blocks.ChoiceBlock(choices=[('left', 'Image to the left'), ('right', 'Image to the right')], help_text='Image on one side of the screen, with text on the other')), ('title', wagtail.blocks.CharBlock(help_text='Max length of 60 characters.', max_length=60)), ('text', wagtail.blocks.CharBlock(max_length=140, required=False)), ('link', wagtail.blocks.StructBlock([('link_text', wagtail.blocks.CharBlock(default='More Details', max_length=50)), ('page', flex.blocks.BasePageChooserBlock(required=False))]))])), ('profiles', wagtail.blocks.StructBlock([('profiles', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('profile', wagtail.snippets.blocks.SnippetChooserBlock(profiles.models.Profile))])))])), ('page_cards_with_tabs', wagtail.blocks.StructBlock([('tab_blocks', wagtail.blocks.StreamBlock([('tabs', wagtail.blocks.StructBlock([('name', wagtail.blocks.CharBlock(help_text='The name of the tab', max_length=50)), ('page_blocks', wagtail.blocks.StreamBlock([('pages', wagtail.blocks.StructBlock([('links', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('link_text', wagtail.blocks.CharBlock(default='More Details', max_length=50)), ('page', flex.blocks.BasePageChooserBlock(required=False))])))]))]))]))]))])), ('cards', wagtail.blocks.StructBlock([('cards', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(help_text='Bold title text for this card. Max length of 100 characters.', max_length=100)), ('text', wagtail.blocks.TextBlock(help_text='Optional text for this card. Max length is 255 characters.', max_length=255, required=False)), ('image', wagtail.images.blocks.ImageChooserBlock(help_text='Image will be automatically cropped to 570px x 370px')), ('link', wagtail.blocks.StructBlock([('link_text', wagtail.blocks.CharBlock(default='More Details', max_length=50)), ('page', flex.blocks.BasePageChooserBlock(required=False))], help_text='Enter a link or select a page'))])))])), ('page_menu', wagtail.blocks.StructBlock([('links', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('link_text', wagtail.blocks.CharBlock(default='More Details', max_length=50)), ('page', flex.blocks.BasePageChooserBlock(required=False))])))])), ('announcements', wagtail.blocks.StructBlock([('announcements', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(help_text='The title of the announcement', max_length=150)), ('icon', wagtail.blocks.CharBlock(default='fa-regular fa-bell', help_text='The icon associated with this announcement', max_length=50)), ('date', wagtail.blocks.DateBlock(help_text='The date of this announcement')), ('text', wagtail.blocks.RichTextBlock(help_text='A description of the announcement'))])))])), ('subsection', wagtail.blocks.StructBlock([('body', wagtail.blocks.StreamBlock([('title', wagtail.blocks.StructBlock([('text', wagtail.blocks.CharBlock(help_text='Text to display', required=True)), ('alignment', wagtail.blocks.ChoiceBlock(choices=[('text-left', 'Title to the left'), ('text-center', 'Title centered'), ('text-right', 'Title to the right')], help_text='Title for a section of the page')), ('header', wagtail.blocks.ChoiceBlock(choices=[('h1', 'Large title (h1)'), ('h2', 'Medium title (h2)'), ('h3', 'Small title (h3)')], help_text='Header size'))])), ('text', flex.blocks.RichTextBlockWithGroup()), ('image_and_text', wagtail.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock(help_text='Image automatically cropped to 786px by 552px', required=True)), ('image_alignment', wagtail.blocks.ChoiceBlock(choices=[('left', 'Image to the left'), ('right', 'Image to the right')], help_text='Image on one side of the screen, with text on the other')), ('title', wagtail.blocks.CharBlock(help_text='Max length of 60 characters.', max_length=60)), ('text', wagtail.blocks.CharBlock(max_length=140, required=False)), ('link', wagtail.blocks.StructBlock([('link_text', wagtail.blocks.CharBlock(default='More Details', max_length=50)), ('page', flex.blocks.BasePageChooserBlock(required=False))]))])), ('profiles', wagtail.blocks.StructBlock([('profiles', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('profile', wagtail.snippets.blocks.SnippetChooserBlock(profiles.models.Profile))])))])), ('page_cards_with_tabs', wagtail.blocks.StructBlock([('tab_blocks', wagtail.blocks.StreamBlock([('tabs', wagtail.blocks.StructBlock([('name', wagtail.blocks.CharBlock(help_text='The name of the tab', max_length=50)), ('page_blocks', wagtail.blocks.StreamBlock([('pages', wagtail.blocks.StructBlock([('links', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('link_text', wagtail.blocks.CharBlock(default='More Details', max_length=50)), ('page', flex.blocks.BasePageChooserBlock(required=False))])))]))]))]))]))])), ('cards', wagtail.blocks.StructBlock([('cards', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(help_text='Bold title text for this card. Max length of 100 characters.', max_length=100)), ('text', wagtail.blocks.TextBlock(help_text='Optional text for this card. Max length is 255 characters.', max_length=255, required=False)), ('image', wagtail.images.blocks.ImageChooserBlock(help_text='Image will be automatically cropped to 570px x 370px')), ('link', wagtail.blocks.StructBlock([('link_text', wagtail.blocks.CharBlock(default='More Details', max_length=50)), ('page', flex.blocks.BasePageChooserBlock(required=False))], help_text='Enter a link or select a page'))])))])), ('page_menu', wagtail.blocks.StructBlock([('links', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('link_text', wagtail.blocks.CharBlock(default='More Details', max_length=50)), ('page', flex.blocks.BasePageChooserBlock(required=False))])))])), ('announcements', wagtail.blocks.StructBlock([('announcements', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(help_text='The title of the announcement', max_length=150)), ('icon', wagtail.blocks.CharBlock(default='fa-regular fa-bell', help_text='The icon associated with this announcement', max_length=50)), ('date', wagtail.blocks.DateBlock(help_text='The date of this announcement')), ('text', wagtail.blocks.RichTextBlock(help_text='A description of the announcement'))])))])), ('subsubsection', wagtail.blocks.StructBlock([('body', wagtail.blocks.StreamBlock([('title', wagtail.blocks.StructBlock([('text', wagtail.blocks.CharBlock(help_text='Text to display', required=True)), ('alignment', wagtail.blocks.ChoiceBlock(choices=[('text-left', 'Title to the left'), ('text-center', 'Title centered'), ('text-right', 'Title to the right')], help_text='Title for a section of the page')), ('header', wagtail.blocks.ChoiceBlock(choices=[('h1', 'Large title (h1)'), ('h2', 'Medium title (h2)'), ('h3', 'Small title (h3)')], help_text='Header size'))])), ('text', flex.blocks.RichTextBlockWithGroup()), ('image_and_text', wagtail.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock(help_text='Image automatically cropped to 786px by 552px', required=True)), ('image_alignment', wagtail.blocks.ChoiceBlock(choices=[('left', 'Image to the left'), ('right', 'Image to the right')], help_text='Image on one side of the screen, with text on the other')), ('title', wagtail.blocks.CharBlock(help_text='Max length of 60 characters.', max_length=60)), ('text', wagtail.blocks.CharBlock(max_length=140, required=False)), ('link', wagtail.blocks.StructBlock([('link_text', wagtail.blocks.CharBlock(default='More Details', max_length=50)), ('page', flex.blocks.BasePageChooserBlock(required=False))]))])), ('profiles', wagtail.blocks.StructBlock([('profiles', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('profile', wagtail.snippets.blocks.SnippetChooserBlock(profiles.models.Profile))])))])), ('page_cards_with_tabs', wagtail.blocks.StructBlock([('tab_blocks', wagtail.blocks.StreamBlock([('tabs', wagtail.blocks.StructBlock([('name', wagtail.blocks.CharBlock(help_text='The name of the tab', max_length=50)), ('page_blocks', wagtail.blocks.StreamBlock([('pages', wagtail.blocks.StructBlock([('links', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('link_text', wagtail.blocks.CharBlock(default='More Details', max_length=50)), ('page', flex.blocks.BasePageChooserBlock(required=False))])))]))]))]))]))])), ('cards', wagtail.blocks.StructBlock([('cards', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(help_text='Bold title text for this card. Max length of 100 characters.', max_length=100)), ('text', wagtail.blocks.TextBlock(help_text='Optional text for this card. Max length is 255 characters.', max_length=255, required=False)), ('image', wagtail.images.blocks.ImageChooserBlock(help_text='Image will be automatically cropped to 570px x 370px')), ('link', wagtail.blocks.StructBlock([('link_text', wagtail.blocks.CharBlock(default='More Details', max_length=50)), ('page', flex.blocks.BasePageChooserBlock(required=False))], help_text='Enter a link or select a page'))])))])), ('page_menu', wagtail.blocks.StructBlock([('links', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('link_text', wagtail.blocks.CharBlock(default='More Details', max_length=50)), ('page', flex.blocks.BasePageChooserBlock(required=False))])))])), ('announcements', wagtail.blocks.StructBlock([('announcements', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(help_text='The title of the announcement', max_length=150)), ('icon', wagtail.blocks.CharBlock(default='fa-regular fa-bell', help_text='The icon associated with this announcement', max_length=50)), ('date', wagtail.blocks.DateBlock(help_text='The date of this announcement')), ('text', wagtail.blocks.RichTextBlock(help_text='A description of the announcement'))])))]))], help_text="The subsubsection's subcontent", required=False))]))], help_text="The subsection's content", required=False))]))], help_text="The section's content", required=False))]))], blank=True, null=True, use_json_field=True),
        ),
    ]
