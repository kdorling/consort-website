# Generated by Django 4.2.1 on 2023-07-17 18:04

import common.blocks
from django.db import migrations
import profiles.models
import wagtail.blocks
import wagtail.fields
import wagtail.images.blocks
import wagtail.snippets.blocks


class Migration(migrations.Migration):

    dependencies = [
        ('information', '0003_alter_informationpage_body'),
    ]

    operations = [
        migrations.AlterField(
            model_name='informationpage',
            name='body',
            field=wagtail.fields.StreamField([('section', wagtail.blocks.StructBlock([('header', wagtail.blocks.CharBlock(help_text="The section's title", required=True)), ('content', wagtail.blocks.RichTextBlock(help_text="The section's content", required=True)), ('subcontent', wagtail.blocks.StreamBlock([('cards', wagtail.blocks.StructBlock([('cards', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(help_text='Bold title text for this card. Max length of 100 characters.', max_length=100)), ('text', wagtail.blocks.TextBlock(help_text='Optional text for this card. Max length is 255 characters.', max_length=255, required=False)), ('image', wagtail.images.blocks.ImageChooserBlock(help_text='Image will be automatically cropped to 570px x 370px')), ('link', wagtail.blocks.StructBlock([('link_text', wagtail.blocks.CharBlock(default='More Details', max_length=50)), ('page', common.blocks.BasePageChooserBlock(required=False))], help_text='Enter a link or select a page'))])))])), ('image_and_text', wagtail.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock(help_text='Image automatically cropped to 786px by 552px', required=True)), ('image_alignment', wagtail.blocks.ChoiceBlock(choices=[('left', 'Image to the left'), ('right', 'Image to the right')], help_text='Image on one side of the screen, with text on the other')), ('title', wagtail.blocks.CharBlock(help_text='Max length of 60 characters.', max_length=60)), ('text', wagtail.blocks.CharBlock(max_length=140, required=False)), ('link', wagtail.blocks.StructBlock([('link_text', wagtail.blocks.CharBlock(default='More Details', max_length=50)), ('page', common.blocks.BasePageChooserBlock(required=False))]))])), ('text', wagtail.blocks.RichTextBlock()), ('profiles', wagtail.blocks.StructBlock([('profiles', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('profile', wagtail.snippets.blocks.SnippetChooserBlock(profiles.models.Profile))])))])), ('subsection', wagtail.blocks.StructBlock([('header', wagtail.blocks.CharBlock(help_text="The section's title", required=True)), ('content', wagtail.blocks.RichTextBlock(help_text="The section's content", required=True)), ('subcontent', wagtail.blocks.StreamBlock([('cards', wagtail.blocks.StructBlock([('cards', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(help_text='Bold title text for this card. Max length of 100 characters.', max_length=100)), ('text', wagtail.blocks.TextBlock(help_text='Optional text for this card. Max length is 255 characters.', max_length=255, required=False)), ('image', wagtail.images.blocks.ImageChooserBlock(help_text='Image will be automatically cropped to 570px x 370px')), ('link', wagtail.blocks.StructBlock([('link_text', wagtail.blocks.CharBlock(default='More Details', max_length=50)), ('page', common.blocks.BasePageChooserBlock(required=False))], help_text='Enter a link or select a page'))])))])), ('image_and_text', wagtail.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock(help_text='Image automatically cropped to 786px by 552px', required=True)), ('image_alignment', wagtail.blocks.ChoiceBlock(choices=[('left', 'Image to the left'), ('right', 'Image to the right')], help_text='Image on one side of the screen, with text on the other')), ('title', wagtail.blocks.CharBlock(help_text='Max length of 60 characters.', max_length=60)), ('text', wagtail.blocks.CharBlock(max_length=140, required=False)), ('link', wagtail.blocks.StructBlock([('link_text', wagtail.blocks.CharBlock(default='More Details', max_length=50)), ('page', common.blocks.BasePageChooserBlock(required=False))]))])), ('text', wagtail.blocks.RichTextBlock()), ('profiles', wagtail.blocks.StructBlock([('profiles', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('profile', wagtail.snippets.blocks.SnippetChooserBlock(profiles.models.Profile))])))])), ('subsubsection', wagtail.blocks.StructBlock([('header', wagtail.blocks.CharBlock(help_text="The section's title", required=True)), ('content', wagtail.blocks.RichTextBlock(help_text="The section's content", required=True)), ('subcontent', wagtail.blocks.StreamBlock([('cards', wagtail.blocks.StructBlock([('cards', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(help_text='Bold title text for this card. Max length of 100 characters.', max_length=100)), ('text', wagtail.blocks.TextBlock(help_text='Optional text for this card. Max length is 255 characters.', max_length=255, required=False)), ('image', wagtail.images.blocks.ImageChooserBlock(help_text='Image will be automatically cropped to 570px x 370px')), ('link', wagtail.blocks.StructBlock([('link_text', wagtail.blocks.CharBlock(default='More Details', max_length=50)), ('page', common.blocks.BasePageChooserBlock(required=False))], help_text='Enter a link or select a page'))])))])), ('image_and_text', wagtail.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock(help_text='Image automatically cropped to 786px by 552px', required=True)), ('image_alignment', wagtail.blocks.ChoiceBlock(choices=[('left', 'Image to the left'), ('right', 'Image to the right')], help_text='Image on one side of the screen, with text on the other')), ('title', wagtail.blocks.CharBlock(help_text='Max length of 60 characters.', max_length=60)), ('text', wagtail.blocks.CharBlock(max_length=140, required=False)), ('link', wagtail.blocks.StructBlock([('link_text', wagtail.blocks.CharBlock(default='More Details', max_length=50)), ('page', common.blocks.BasePageChooserBlock(required=False))]))])), ('text', wagtail.blocks.RichTextBlock()), ('profiles', wagtail.blocks.StructBlock([('profiles', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('profile', wagtail.snippets.blocks.SnippetChooserBlock(profiles.models.Profile))])))]))], help_text="The subsubsection's subcontent", required=False))]))], help_text="The subsection's content", required=False))]))], help_text="The section's content", required=False))])), ('text', wagtail.blocks.RichTextBlock()), ('profiles', wagtail.blocks.StructBlock([('profiles', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('profile', wagtail.snippets.blocks.SnippetChooserBlock(profiles.models.Profile))])))]))], blank=True, null=True, use_json_field=True),
        ),
    ]
